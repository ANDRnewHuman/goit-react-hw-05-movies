{"version":3,"file":"static/js/377.16a50235.chunk.js","mappings":"qaAIaA,GAAWC,EAAAA,EAAAA,IAAOC,EAAAA,IAAPD,CAAH,sKAURE,EAAUF,EAAAA,GAAAA,IAAH,6LAUPG,EAAWH,EAAAA,GAAAA,IAAH,uFAMRI,EAAOJ,EAAAA,GAAAA,GAAH,sHASJK,GAAaL,EAAAA,EAAAA,IAAOM,EAAAA,GAAPN,CAAH,4CAIVO,EAAiBP,EAAAA,GAAAA,IAAH,oFAKdQ,EAAKR,EAAAA,GAAAA,GAAH,qIAQFS,EAAKT,EAAAA,GAAAA,GAAH,gEAKFU,EAAWV,EAAAA,GAAAA,IAAH,qF,wMClCfW,EAAc,IAAIC,EAAAA,GAET,SAASC,IAAa,IAAD,IAClC,GAAkCC,EAAAA,EAAAA,UAAS,CAAC,GAA5C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA0BJ,EAAAA,EAAAA,WAAS,GAAnC,eAAOK,EAAP,KAAcC,EAAd,KAEQC,GAAOC,EAAAA,EAAAA,MAAPD,GACFE,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,QAAM,oBAACH,EAASI,aAAV,aAAC,EAAgBC,YAAjB,QAAyB,WAC1CC,GAAWC,EAAAA,EAAAA,OAEjBC,EAAAA,EAAAA,YAAU,WACHV,IAGLH,GAAa,GAEb,mCAAC,6GAEsBP,EAAYqB,mBAAmBX,GAFrD,OAESY,EAFT,OAIGjB,EAAa,CACXkB,QAASD,EAAKE,YACdC,MAAOH,EAAKG,MACZC,KAAMJ,EAAKI,KACXC,MAAMC,EAAAA,EAAAA,IAAgBN,EAAKO,cAC3BC,QAAQC,EAAAA,EAAAA,IAAWT,EAAKU,cACxBC,QAAQC,EAAAA,EAAAA,IAAUZ,EAAKW,OAAQ,QAC/BE,SAAUb,EAAKa,SACfC,QAASd,EAAKc,UAZnB,gDAeG3B,GAAS,GAfZ,yBAiBGF,GAAa,GAjBhB,4EAAD,uDAoBD,GAAE,CAACG,KAEJU,EAAAA,EAAAA,YAAU,WACJZ,GACFU,EAAS,IAEZ,GAAE,CAACV,EAAOU,IAEX,IAAQK,EACNnB,EADMmB,QAASE,EACfrB,EADeqB,MAAOC,EACtBtB,EADsBsB,KAAMC,EAC5BvB,EAD4BuB,KAAMG,EAClC1B,EADkC0B,OAAQG,EAC1C7B,EAD0C6B,OAAQE,EAClD/B,EADkD+B,SAAUC,EAC5DhC,EAD4DgC,QAG9D,OACE,iCACE,SAAC,KAAD,CAAMC,GAAIvB,EAASwB,QAAnB,UACE,SAAC,KAAD,MAGDhC,GACC,SAAC,MAAD,UAAciC,EAAAA,MAEd,UAAC,KAAD,YACE,SAAC,KAAD,CACEC,IACEjB,EAAO,0CACgCA,GACnCkB,EAENC,IAAKN,GAAoB,iBAE3B,4BACE,2BACE,SAAC,KAAD,UAAOX,GAAgBC,KACvB,SAAC,KAAD,UAAOC,GAAc,MACrB,SAAC,KAAD,UAAOG,GAAkB,MACzB,SAAC,KAAD,UAAOG,GAAkB,MACzB,SAAC,KAAD,UAAOE,GAAsB,SAE/B,UAAC,KAAD,YACE,SAAC,KAAD,CAAYE,GAAI,OAAhB,SAAwB,UACxB,SAAC,KAAD,CAAYA,GAAI,UAAhB,SAA2B,sBAMnC,SAAC,EAAAM,SAAD,WACE,SAAC,KAAD,QAIP,C","sources":["components/Movie/MovieInfo.styled.js","pages/MovieInfo.jsx"],"sourcesContent":["import { Link } from 'react-router-dom';\nimport { FiCornerUpLeft } from 'react-icons/fi';\nimport styled from 'styled-components';\n\nexport const IconBack = styled(FiCornerUpLeft)`\n  width: 35px;\n  height: 35px;\n  transition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  &:hover {\n    transform: scale(1.3);\n  }\n`;\n\nexport const Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  column-gap: 20px;\n  margin-bottom: 60px;\n  padding-right: 20px;\n  background-color: #6a7d98;\n  border-radius: 20px;\n`;\n\nexport const MovieImg = styled.img`\n  width: 400px;\n  min-height: 350px;\n  border-radius: 20px;\n`;\n\nexport const Item = styled.li`\n  color: white;\n  font-size: 18px;\n\n  &:not(:last-child) {\n    margin-bottom: 15px;\n  }\n`;\n\nexport const StyledLink = styled(Link)`\n  font-size: 24px;\n`;\n\nexport const AddInfoWrapper = styled.div`\n  display: flex;\n  margin-top: 30px;\n  column-gap: 20px;\n`;\nexport const Ul = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  align-items: center;\n  gap: 40px 30px;\n`;\n\nexport const Li = styled.li`\n  width: 230px;\n  text-align: center;\n`;\n\nexport const ActorImg = styled.img`\n  width: 100%;\n  object-fit: cover;\n  border-radius: 20px;\n`;\n","import { useState, useEffect, useRef, Suspense } from 'react';\nimport {\n  useParams,\n  useNavigate,\n  useLocation,\n  Link,\n  Outlet,\n} from 'react-router-dom';\nimport { TailSpin } from 'react-loader-spinner';\n\nimport {\n  MovieDB_API,\n  getYearFromDate,\n  getDecimal,\n  getString,\n  spinStyles,\n} from 'services';\nimport {\n  IconBack,\n  Wrapper,\n  MovieImg,\n  Item,\n  AddInfoWrapper,\n  StyledLink,\n} from '../components/Movie/MovieInfo.styled';\nimport defaultMovie from 'images/default-movie.png';\n\nconst movieDB_API = new MovieDB_API();\n\nexport default function MovieInfo() {\n  const [movieInfo, setMovieInfo] = useState({});\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(false);\n\n  const { id } = useParams();\n  const location = useLocation();\n  const backLink = useRef(location.state?.from ?? '/movies');\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    if (!id) {\n      return;\n    }\n    setIsLoading(true);\n\n    (async function getMovieInfo() {\n      try {\n        const data = await movieDB_API.getMovieDetailInfo(id);\n\n        setMovieInfo({\n          imgPath: data.poster_path,\n          title: data.title,\n          name: data.name,\n          year: getYearFromDate(data.release_date),\n          rating: getDecimal(data.vote_average),\n          genres: getString(data.genres, 'name'),\n          overview: data.overview,\n          tagline: data.tagline,\n        });\n      } catch (error) {\n        setError(true);\n      } finally {\n        setIsLoading(false);\n      }\n    })();\n  }, [id]);\n\n  useEffect(() => {\n    if (error) {\n      navigate('*');\n    }\n  }, [error, navigate]);\n\n  const { imgPath, title, name, year, rating, genres, overview, tagline } =\n    movieInfo;\n\n  return (\n    <>\n      <Link to={backLink.current}>\n        <IconBack />\n      </Link>\n\n      {isLoading ? (\n        <TailSpin {...spinStyles} />\n      ) : (\n        <Wrapper>\n          <MovieImg\n            src={\n              imgPath\n                ? `https://image.tmdb.org/t/p/w500/${imgPath}`\n                : defaultMovie\n            }\n            alt={tagline ? tagline : 'Movie Image'}\n          />\n          <div>\n            <ul>\n              <Item>{title ? title : name}</Item>\n              <Item>{year ? year : ''}</Item>\n              <Item>{rating ? rating : ''}</Item>\n              <Item>{genres ? genres : ''}</Item>\n              <Item>{overview ? overview : ''}</Item>\n            </ul>\n            <AddInfoWrapper>\n              <StyledLink to={'cast'}>Cast</StyledLink>\n              <StyledLink to={'reviews'}>Reviews</StyledLink>\n            </AddInfoWrapper>\n          </div>\n        </Wrapper>\n      )}\n\n      <Suspense>\n        <Outlet />\n      </Suspense>\n    </>\n  );\n}\n"],"names":["IconBack","styled","FiCornerUpLeft","Wrapper","MovieImg","Item","StyledLink","Link","AddInfoWrapper","Ul","Li","ActorImg","movieDB_API","MovieDB_API","MovieInfo","useState","movieInfo","setMovieInfo","isLoading","setIsLoading","error","setError","id","useParams","location","useLocation","backLink","useRef","state","from","navigate","useNavigate","useEffect","getMovieDetailInfo","data","imgPath","poster_path","title","name","year","getYearFromDate","release_date","rating","getDecimal","vote_average","genres","getString","overview","tagline","to","current","spinStyles","src","defaultMovie","alt","Suspense"],"sourceRoot":""}