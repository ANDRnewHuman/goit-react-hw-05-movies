{"version":3,"file":"static/js/823.17266c3f.chunk.js","mappings":"qaAIaA,GAAWC,EAAAA,EAAAA,IAAOC,EAAAA,IAAPD,CAAH,sKAURE,EAAUF,EAAAA,GAAAA,IAAH,6LAUPG,EAAWH,EAAAA,GAAAA,IAAH,uFAMRI,EAAOJ,EAAAA,GAAAA,GAAH,sHASJK,GAAaL,EAAAA,EAAAA,IAAOM,EAAAA,GAAPN,CAAH,4CAIVO,EAAiBP,EAAAA,GAAAA,IAAH,oFAKdQ,EAAKR,EAAAA,GAAAA,GAAH,qIAQFS,EAAKT,EAAAA,GAAAA,GAAH,gEAKFU,EAAWV,EAAAA,GAAAA,IAAH,qF,gPCrDfW,EAAc,IAAIC,EAAAA,GAET,SAASC,IACtB,OAAoCC,EAAAA,EAAAA,UAAS,IAA7C,eAAOC,EAAP,KAAmBC,EAAnB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA0BJ,EAAAA,EAAAA,WAAS,GAAnC,eAAOK,EAAP,KAAcC,EAAd,KAEQC,GAAOC,EAAAA,EAAAA,MAAPD,GACFE,GAAWC,EAAAA,EAAAA,MAoCjB,OAlCAC,EAAAA,EAAAA,YAAU,WACHJ,IAGLH,GAAa,GAEb,mCAAC,iHAE0BP,EAAYe,aAAaL,GAFnD,gBAEWM,EAFX,EAEWA,KACFC,EAAUD,EACbE,MAAM,EAAG,IACTC,KAAI,kBAA2D,CAC9DT,GADG,EAAGA,GAENU,aAFG,EAAOC,aAGVC,KAHG,EAAqBA,KAIxBC,cAJG,EAA2BA,cAK9BC,UALG,EAA0CA,UAA1C,IAQPnB,EAAcY,GAbjB,gDAeGR,GAAS,GAfZ,yBAiBGF,GAAa,GAjBhB,4EAAD,uDAoBD,GAAE,CAACG,KAEJI,EAAAA,EAAAA,YAAU,WACJN,GACFI,EAAS,IAEZ,GAAE,CAACJ,EAAOI,KAGT,8BACGN,GACC,SAAC,MAAD,UAAcmB,EAAAA,MAEd,SAAC,EAAA5B,GAAD,UACGO,EAAWe,KACV,gBAAGT,EAAH,EAAGA,GAAIU,EAAP,EAAOA,aAAcE,EAArB,EAAqBA,KAAMC,EAA3B,EAA2BA,cAAeC,EAA1C,EAA0CA,UAA1C,OACE,UAAC,EAAA1B,GAAD,YACE,SAAC,KAAD,CACE4B,IACEN,EAAY,0CAC2BA,GACnCO,EAENC,IAAKN,GAAcC,KAErB,uBAAID,GAAcC,KAClB,uBAAIC,GAAwB,yBAVrBd,EADX,OAmBX,C","sources":["components/Movie/MovieInfo.styled.js","pages/Cast.jsx"],"sourcesContent":["import { Link } from 'react-router-dom';\nimport { FiCornerUpLeft } from 'react-icons/fi';\nimport styled from 'styled-components';\n\nexport const IconBack = styled(FiCornerUpLeft)`\n  width: 35px;\n  height: 35px;\n  transition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  &:hover {\n    transform: scale(1.3);\n  }\n`;\n\nexport const Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  column-gap: 20px;\n  margin-bottom: 60px;\n  padding-right: 20px;\n  background-color: #6a7d98;\n  border-radius: 20px;\n`;\n\nexport const MovieImg = styled.img`\n  width: 400px;\n  min-height: 350px;\n  border-radius: 20px;\n`;\n\nexport const Item = styled.li`\n  color: white;\n  font-size: 18px;\n\n  &:not(:last-child) {\n    margin-bottom: 15px;\n  }\n`;\n\nexport const StyledLink = styled(Link)`\n  font-size: 24px;\n`;\n\nexport const AddInfoWrapper = styled.div`\n  display: flex;\n  margin-top: 30px;\n  column-gap: 20px;\n`;\nexport const Ul = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  align-items: center;\n  gap: 40px 30px;\n`;\n\nexport const Li = styled.li`\n  width: 230px;\n  text-align: center;\n`;\n\nexport const ActorImg = styled.img`\n  width: 100%;\n  object-fit: cover;\n  border-radius: 20px;\n`;\n","import { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { TailSpin } from 'react-loader-spinner';\n\nimport { MovieDB_API, spinStyles } from 'services';\nimport { Ul, Li, ActorImg } from '../components/Movie/MovieInfo.styled';\nimport defaultActor from 'images/default-actor.png';\n\nconst movieDB_API = new MovieDB_API();\n\nexport default function Cast() {\n  const [actorsList, setActorsList] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(false);\n\n  const { id } = useParams();\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    if (!id) {\n      return;\n    }\n    setIsLoading(true);\n\n    (async function getData() {\n      try {\n        const { cast } = await movieDB_API.getMovieCast(id);\n        const results = cast\n          .slice(0, 12)\n          .map(({ id, profile_path, name, original_name, character }) => ({\n            id,\n            actorImgPath: profile_path,\n            name,\n            original_name,\n            character,\n          }));\n\n        setActorsList(results);\n      } catch (error) {\n        setError(true);\n      } finally {\n        setIsLoading(false);\n      }\n    })();\n  }, [id]);\n\n  useEffect(() => {\n    if (error) {\n      navigate('*');\n    }\n  }, [error, navigate]);\n\n  return (\n    <>\n      {isLoading ? (\n        <TailSpin {...spinStyles} />\n      ) : (\n        <Ul>\n          {actorsList.map(\n            ({ id, actorImgPath, name, original_name, character }) => (\n              <Li key={id}>\n                <ActorImg\n                  src={\n                    actorImgPath\n                      ? `https://image.tmdb.org/t/p/w500/${actorImgPath}`\n                      : defaultActor\n                  }\n                  alt={name ? name : original_name}\n                />\n                <p>{name ? name : original_name}</p>\n                <p>{character ? character : 'No information yet'}</p>\n              </Li>\n            )\n          )}\n        </Ul>\n      )}\n    </>\n  );\n}\n"],"names":["IconBack","styled","FiCornerUpLeft","Wrapper","MovieImg","Item","StyledLink","Link","AddInfoWrapper","Ul","Li","ActorImg","movieDB_API","MovieDB_API","Cast","useState","actorsList","setActorsList","isLoading","setIsLoading","error","setError","id","useParams","navigate","useNavigate","useEffect","getMovieCast","cast","results","slice","map","actorImgPath","profile_path","name","original_name","character","spinStyles","src","defaultActor","alt"],"sourceRoot":""}