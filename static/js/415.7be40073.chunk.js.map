{"version":3,"file":"static/js/415.7be40073.chunk.js","mappings":"qSAEaA,EAASC,EAAAA,GAAAA,IAAH,6GAONC,EAAQD,EAAAA,GAAAA,EAAH,+G,mBCLH,SAASE,EAAT,GAA8D,IAAtCC,EAAqC,EAArCA,MAAOC,EAA8B,EAA9BA,KAAMC,EAAwB,EAAxBA,YAAaC,EAAW,EAAXA,QACzDC,EAAQ,0CAAsCF,GAEpD,OACE,iCACE,SAACN,EAAD,CACES,IAAKH,EAAcE,EAAWE,EAC9BC,IAAKJ,GAAoB,YAE3B,SAACL,EAAD,UAAQE,GAAgBC,MAG7B,C,oBCbYO,EAAKX,EAAAA,GAAAA,GAAH,qLAQFY,EAAKZ,EAAAA,GAAAA,GAAH,gVAaFa,GAAab,EAAAA,EAAAA,IAAOc,EAAAA,GAAPd,CAAH,2GCdjBe,EAAc,IAAIC,EAAAA,GAET,SAASC,EAAT,GAAgC,IAAVC,EAAS,EAATA,MACnC,GAA4BC,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACMC,GAAWC,EAAAA,EAAAA,MAqCjB,OAnCAC,EAAAA,EAAAA,YAAU,WACRH,GAAa,GAEb,mCAAC,mHAE4CR,EAAYY,UAAUT,GAFlE,mBAEWU,EAFX,EAEWA,QAEc,KAFLC,EAFpB,EAEoBA,eAFpB,sBAKKR,EAAU,IACJ,IAAIS,MAAM,0CANrB,OAQOZ,GACFa,EAAAA,GAAAA,QAAA,0BACqBF,EADrB,8IAKIG,EAAaJ,EAAQK,KACzB,kBAAgD,CAC9CC,GADF,EAAGA,GAED7B,YAFF,EAAOA,YAGLF,MAHF,EAAoBA,MAIlBC,KAJF,EAA2BA,KAKzBE,QALF,EAAiCA,QAAjC,IAQFe,EAAUW,GAvBb,kDAyBGD,EAAAA,GAAAA,MAAY,KAAMI,SAzBrB,yBA2BGZ,GAAa,GA3BhB,6EAAD,sDA8BD,GAAE,CAACL,KAGF,8BACGI,GACC,SAAC,MAAD,UAAcc,EAAAA,MAEd,SAACzB,EAAD,UACGS,EAAOa,KAAI,gBAAGC,EAAH,EAAGA,GAAI/B,EAAP,EAAOA,MAAOC,EAAd,EAAcA,KAAMC,EAApB,EAAoBA,YAAaC,EAAjC,EAAiCA,QAAjC,OACV,SAACM,EAAD,WACE,SAACC,EAAD,CAAYwB,GAAE,kBAAaH,GAAMI,MAAO,CAAEC,KAAMf,GAAhD,UACE,SAACtB,EAAD,CACEC,MAAOA,EACPC,KAAMA,EACNC,YAAaA,EACbC,QAASA,OANN4B,EADC,OAgBrB,C,gHCvEKjC,EAAQD,EAAAA,GAAAA,GAAH,sFAMI,SAASwC,IACtB,OACE,iCACE,SAACvC,EAAD,UAAO,+DACP,SAAC,IAAD,MAGL,C","sources":["components/Movie/PreviewMovie.styled.js","components/Movie/PreviewMovie.jsx","components/MoviesList/MoviesList.styled.js","components/MoviesList/MoviesList.jsx","pages/Home.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Poster = styled.img`\n  width: 100%;\n  height: 350px;\n  align-self: flex-start;\n  border-radius: 20px;\n`;\n\nexport const Title = styled.p`\n  align-self: flex-start;\n  padding: 5px;\n  font-size: 18px;\n  text-align: center;\n`;\n","import PropTypes from 'prop-types';\nimport { Title, Poster } from './PreviewMovie.styled';\nimport defaultMovie from '../../images/default-movie.png';\n\nexport default function PreviewMovie({ title, name, poster_path, tagline }) {\n  const imageUrl = `https://image.tmdb.org/t/p/w500/${poster_path}`;\n\n  return (\n    <>\n      <Poster\n        src={poster_path ? imageUrl : defaultMovie}\n        alt={tagline ? tagline : 'Poster'}\n      />\n      <Title>{title ? title : name}</Title>\n    </>\n  );\n}\n\nPreviewMovie.propTypes = {\n  title: PropTypes.string,\n  name: PropTypes.string,\n  poster_path: PropTypes.string,\n  tagline: PropTypes.string,\n};\n","import { Link } from 'react-router-dom';\nimport styled from 'styled-components';\n\nexport const Ul = styled.ul`\n  display: grid;\n  margin-top: 30px;\n  max-width: calc(100vw - 48px);\n  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\n  grid-gap: 25px;\n`;\n\nexport const Li = styled.li`\n  color: white;\n  background-color: #5b4865;\n  border-radius: 20px;\n  box-shadow: 0px 1px 3px 0px rgba(0, 0, 0, 0.2),\n    0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 2px 1px -1px rgba(0, 0, 0, 0.12);\n  transition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  &:hover {\n    transform: scale(1.03);\n  }\n`;\n\nexport const LinkStyled = styled(Link)`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  height: 100%;\n`;\n","import { useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { TailSpin } from 'react-loader-spinner';\nimport { toast } from 'react-toastify';\nimport PropTypes from 'prop-types';\n\nimport { MovieDB_API, spinStyles } from 'services';\nimport PreviewMovie from '../Movie/PreviewMovie';\nimport { Ul, Li, LinkStyled } from './MoviesList.styled';\n\nconst movieDB_API = new MovieDB_API();\n\nexport default function MoviesList({ query }) {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const location = useLocation();\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    (async function getData() {\n      try {\n        const { results, total_results } = await movieDB_API.getMovies(query);\n\n        if (total_results === 0) {\n          setMovies([]);\n          throw new Error('Sorry, no movies found with that name.');\n        }\n        if (query) {\n          toast.success(\n            `There are found ${total_results} movies. Currently, only the first page will be displayed, but we are working on pagination with infinite scroll. Stay tuned for updates!`\n          );\n        }\n\n        const moviesData = results.map(\n          ({ id, poster_path, title, name, tagline }) => ({\n            id,\n            poster_path,\n            title,\n            name,\n            tagline,\n          })\n        );\n        setMovies(moviesData);\n      } catch (error) {\n        toast.error(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    })();\n  }, [query]);\n\n  return (\n    <>\n      {isLoading ? (\n        <TailSpin {...spinStyles} />\n      ) : (\n        <Ul>\n          {movies.map(({ id, title, name, poster_path, tagline }) => (\n            <Li key={id}>\n              <LinkStyled to={`/movies/${id}`} state={{ from: location }}>\n                <PreviewMovie\n                  title={title}\n                  name={name}\n                  poster_path={poster_path}\n                  tagline={tagline}\n                />\n              </LinkStyled>\n            </Li>\n          ))}\n        </Ul>\n      )}\n    </>\n  );\n}\n\nMoviesList.propTypes = {\n  query: PropTypes.string,\n};\n","import MoviesList from '../components/MoviesList/MoviesList';\nimport styled from 'styled-components';\n\nconst Title = styled.h1`\n  color: #424254;\n  font-size: 24px;\n  text-align: center;\n`;\n\nexport default function Home() {\n  return (\n    <>\n      <Title>Presenting the epitome of today's the most popular films:</Title>\n      <MoviesList />\n    </>\n  );\n}\n"],"names":["Poster","styled","Title","PreviewMovie","title","name","poster_path","tagline","imageUrl","src","defaultMovie","alt","Ul","Li","LinkStyled","Link","movieDB_API","MovieDB_API","MoviesList","query","useState","movies","setMovies","isLoading","setIsLoading","location","useLocation","useEffect","getMovies","results","total_results","Error","toast","moviesData","map","id","message","spinStyles","to","state","from","Home"],"sourceRoot":""}